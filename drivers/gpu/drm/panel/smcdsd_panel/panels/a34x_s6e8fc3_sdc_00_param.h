/* SPDX-License-Identifier: GPL-2.0 */
#ifndef __S6E8FC3_SDC_00_PARAM_H__
#define __S6E8FC3_SDC_00_PARAM_H__

#include <linux/types.h>
#include <drm/drm_mipi_dsi.h>

#include "../smcdsd_dsi_msg.h"
#include "a34x_s6e8fc3_sdc_00_param_brightness.h"

#define LCD_TYPE_VENDOR		"SDC"

#define EXTEND_BRIGHTNESS	486
#define UI_MAX_BRIGHTNESS	255
#define UI_DEFAULT_BRIGHTNESS	128

#define LDI_REG_BRIGHTNESS	0x51
#define LDI_REG_ID		0x04
#define LDI_REG_DATE		0xA9
#define LDI_REG_CHIP_ID		0xEA

/* len is read length */
#define LDI_LEN_ID		3
#define LDI_LEN_DATE		10	/* A9h 1st ... 11th but ap max rx length is 10 */
#define LDI_LEN_CHIP_ID		10	/* EAh 1st ... 10th */

#define NORMAL_TEMPERATURE	25	/* 25 degrees Celsius */

static unsigned char S6E8FC3_SDC_00_SLEEP_IN[] = { 0x10 };
static unsigned char S6E8FC3_SDC_00_SLEEP_OUT[] = { 0x11 };
static unsigned char S6E8FC3_SDC_00_DISPLAY_OFF[] = { 0x28 };
static unsigned char S6E8FC3_SDC_00_DISPLAY_ON[] = { 0x29 };
static unsigned char S6E8FC3_SDC_00_KEY1_ENABLE[] = { 0x9F, 0xA5, 0xA5 };
static unsigned char S6E8FC3_SDC_00_KEY2_ENABLE[] = { 0xF0, 0x5A, 0x5A };
static unsigned char S6E8FC3_SDC_00_KEY3_ENABLE[] = { 0xFC, 0x5A, 0x5A };
static unsigned char S6E8FC3_SDC_00_KEY1_DISABLE[] = { 0x9F, 0x5A, 0x5A };
static unsigned char S6E8FC3_SDC_00_KEY2_DISABLE[] = { 0xF0, 0xA5, 0xA5 };
static unsigned char S6E8FC3_SDC_00_KEY3_DISABLE[] = { 0xFC, 0xA5, 0xA5 };

static unsigned char S6E8FC3_SDC_00_DSC[] = { 0x9D, 0x01 };
static unsigned char S6E8FC3_SDC_00_PPS[] = {
	//1080x2400 Slice Info : 540x40 / 2 slice mode
	0x9E,
	0x11, 0x00, 0x00, 0x89, 0x30, 0x80, 0x09, 0x60,
	0x04, 0x38, 0x00, 0x28, 0x02, 0x1C, 0x02, 0x1C,
	0x02, 0x00, 0x02, 0x0E, 0x00, 0x20, 0x03, 0xDD,
	0x00, 0x07, 0x00, 0x0C, 0x02, 0x77, 0x02, 0x8B,
	0x18, 0x00, 0x10, 0xF0, 0x03, 0x0C, 0x20, 0x00,
	0x06, 0x0B, 0x0B, 0x33, 0x0E, 0x1C, 0x2A, 0x38,
	0x46, 0x54, 0x62, 0x69, 0x70, 0x77, 0x79, 0x7B,
	0x7D, 0x7E, 0x01, 0x02, 0x01, 0x00, 0x09, 0x40,
	0x09, 0xBE, 0x19, 0xFC, 0x19, 0xFA, 0x19, 0xF8,
	0x1A, 0x38, 0x1A, 0x78, 0x1A, 0xB6, 0x2A, 0xF6,
	0x2B, 0x34, 0x2B, 0x74, 0x3B, 0x74, 0x6B, 0xF4,
	0x00
};

static unsigned char S6E8FC3_SDC_00_TSP_VSYNC_ON[] = {
	0xE8,
	0x00, 0x00, 0x14, 0x18, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01
};

static unsigned char S6E8FC3_SDC_00_FFC_DEFAULT[] = {
	0xDF,
	0x09, 0x30, 0x95, 0x56, 0xDD, 0x56, 0xDD
};

static unsigned char S6E8FC3_SDC_00_BLACK_INSERT_OFF[] = { 0xF2, 0x0C };

static unsigned char S6E8FC3_SDC_00_PANEL_UPDATE[] = {
	0xF7,
	0x0B
};

static unsigned char S6E8FC3_SDC_00_ETC_SETTING_1_GP[] = {
	0xB0,
	0x00, 0x15, 0xF6
};

static unsigned char S6E8FC3_SDC_00_ETC_SETTING_1[] = {
	0xF6,
	0xF0
};

static unsigned char S6E8FC3_SDC_00_ETC_SETTING_2_GP[] = {
	0xB0,
	0x00, 0x28, 0xF6
};

static unsigned char S6E8FC3_SDC_00_ETC_SETTING_2[] = {
	0xF6,
	0xF0
};

static unsigned char S6E8FC3_SDC_00_ETC_SETTING_3_GP[] = {
	0xB0,
	0x00, 0x3B, 0xF6
};

static unsigned char S6E8FC3_SDC_00_ETC_SETTING_3[] = {
	0xF6,
	0xF0
};

static unsigned char S6E8FC3_SDC_00_ERR_FG_SETTING_1[] = {
	0xED,
	0x01, 0x26,
	/* Vlin1, ELVDD, Vlin3 Monitor On */
};

static unsigned char S6E8FC3_SDC_00_ERR_FG_SETTING_2_GP[] = {
	0xB0,
	0x00, 0x06, 0xF4
};

static unsigned char S6E8FC3_SDC_00_ERR_FG_SETTING_2[] = {
	0xF4, 0x1C
};

static unsigned char S6E8FC3_SDC_00_ERR_FG_ON[] = {
	0xE1, 0x83
};

static unsigned char S6E8FC3_SDC_00_PCD_DET_SET[] = {
	0xEA,
	0x5C, 0x51,	/* 1st 0x4C: default HIGH, 2nd 0x51 : Enable SW RESET */
};

static unsigned char S6E8FC3_SDC_00_SEED_SETTING[] = {
	0xB8,
	0x00, 0x00, 0x00, 0x5F, 0x8F, 0x00, 0x5F, 0x8F
};

static unsigned char S6E8FC3_SDC_00_FPS_90HZ[] = {
	0x60,
	0x01, 0x00
};

static unsigned char S6E8FC3_SDC_00_FPS_60HZ[] = {
	0x60,
	0x21, 0x00
};

static unsigned char S6E8FC3_SDC_00_WRCTRD_NORMAL[] = {
	0x53,
	0x20,
};

static unsigned char S6E8FC3_SDC_00_WRCTRD_HBM[] = {
	0x53,
	0xE0,
};

static unsigned char S6E8FC3_SDC_00_BRIGHTNESS_00[] = {
	0x53,
	0x20,
};

static unsigned char S6E8FC3_SDC_00_ACL_DEFAULT_GP[] = {
	0xB0,
	0x00, 0x0D, 0xB4
};

static unsigned char S6E8FC3_SDC_00_ACL_DEFAULT[] = {
	0xB4,
	0x55, 0x00, 0xB0, 0x57, 0x66, 0xA1, 0x15,
	0x55, 0x55, 0x55, 0x08, 0xF1, 0xC6, 0x48,
	0x40, 0x00, 0x20
};

static unsigned char S6E8FC3_SDC_00_ACL_OFF[] = {
	0x55,
	0x00,
};

static unsigned char S6E8FC3_SDC_00_ACL_08[] = {
	0x55,
	0x01,
};

static unsigned char S6E8FC3_SDC_00_TEST_SET_GP[] = {
	0xB0,
	0x00, 0x0F, 0xCD
};

static unsigned char S6E8FC3_SDC_00_TEST_SET[] = {
	0xCD,
	0x19,	/* 1st: TSET */
};

static struct msg_segment MSG_S6E8FC3_SDC_00_EXIT[] = {
	{__MSG_TX(S6E8FC3_SDC_00_DISPLAY_OFF)},
	{__MSG_TX(S6E8FC3_SDC_00_SLEEP_IN), __MSLEEP(83)},	/* Wait 5 Frames(83ms @60Hz) */
};

static struct msg_segment MSG_S6E8FC3_SDC_00_INIT[] = {
	{__MSG_TX(S6E8FC3_SDC_00_SLEEP_OUT), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), __MSLEEP(100)},	/* Delay 50ms */
	{__MSG_TX(S6E8FC3_SDC_00_KEY1_ENABLE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY2_ENABLE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY3_ENABLE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_DSC), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_PPS), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

	{__MSG_TX(S6E8FC3_SDC_00_TSP_VSYNC_ON), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_FFC_DEFAULT), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_BLACK_INSERT_OFF), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

	{__MSG_TX(S6E8FC3_SDC_00_ETC_SETTING_1_GP), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_ETC_SETTING_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_ETC_SETTING_2_GP), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_ETC_SETTING_2), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_ETC_SETTING_3_GP), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_ETC_SETTING_3), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

	{__MSG_TX(S6E8FC3_SDC_00_ERR_FG_SETTING_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_ERR_FG_SETTING_2_GP), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_ERR_FG_SETTING_2), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_ERR_FG_ON), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_PCD_DET_SET), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_SEED_SETTING), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

	{__MSG_TX(S6E8FC3_SDC_00_FPS_90HZ), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_WRCTRD_NORMAL), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_BRIGHTNESS_00), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_ACL_DEFAULT_GP), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_ACL_DEFAULT), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_ACL_08), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_TEST_SET_GP), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_TEST_SET), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), __MSLEEP(20)},	/* Delay 20ms */

	{__MSG_TX(S6E8FC3_SDC_00_DISPLAY_ON), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

	{__MSG_TX(S6E8FC3_SDC_00_KEY3_DISABLE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY2_DISABLE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY1_DISABLE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
};

static struct msg_segment MSG_S6E8FC3_SDC_00_KEY_ENABLE[] = {
	{__MSG_TX(S6E8FC3_SDC_00_KEY1_ENABLE)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY2_ENABLE)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY3_ENABLE)},
};

static struct msg_segment MSG_S6E8FC3_SDC_00_KEY_DISABLE[] = {
	{__MSG_TX(S6E8FC3_SDC_00_KEY3_DISABLE)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY2_DISABLE)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY1_DISABLE)},
};

static struct msg_segment MSG_S6E8FC3_SDC_00_ACL_EXIT[] = {
	{__MSG_TX(S6E8FC3_SDC_00_ACL_OFF)},
 };

static struct msg_segment MSG_S6E8FC3_SDC_00_ACL_08P[] = {
	{__MSG_TX(S6E8FC3_SDC_00_ACL_08)},
 };

static struct msg_segment MSG_S6E8FC3_SDC_00_WRCRLD_NORMAL[] = {
	{__MSG_TX(S6E8FC3_SDC_00_WRCTRD_NORMAL)},
 };

static struct msg_segment MSG_S6E8FC3_SDC_00_WRCRLD_HBM[] = {
	{__MSG_TX(S6E8FC3_SDC_00_WRCTRD_HBM)},
 };

static struct msg_segment MSG_S6E8FC3_SDC_00_FPS_60HZ[] = {
	{__MSG_TX(S6E8FC3_SDC_00_FPS_60HZ)},
 };

static struct msg_segment MSG_S6E8FC3_SDC_00_FPS_90HZ[] = {
	{__MSG_TX(S6E8FC3_SDC_00_FPS_90HZ)},
 };

static struct msg_segment MSG_S6E8FC3_SDC_00_PANEL_UPDATE[] = {
	{__MSG_TX(S6E8FC3_SDC_00_PANEL_UPDATE)},
 };

static struct msg_segment MSG_S6E8FC3_SDC[] = {
	{__MSG_TX(S6E8FC3_SDC_00_DISPLAY_ON)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY1_ENABLE)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY2_ENABLE)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY3_ENABLE)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY1_DISABLE)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY2_DISABLE)},
	{__MSG_TX(S6E8FC3_SDC_00_KEY3_DISABLE)},
};

enum {
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_DISPLAY_ON)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_KEY1_ENABLE)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_KEY2_ENABLE)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_KEY3_ENABLE)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_KEY1_DISABLE)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_KEY2_DISABLE)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_KEY3_DISABLE)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_EXIT)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_INIT)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_KEY_ENABLE)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_KEY_DISABLE)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_ACL_EXIT)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_ACL_08P)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_WRCRLD_NORMAL)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_WRCRLD_HBM)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_FPS_60HZ)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_FPS_90HZ)
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_PANEL_UPDATE)
};

static struct msg_package PACKAGE_S6E8FC3_SDC[ ] = {
	ADDRESS(MSG_S6E8FC3_SDC, MSG_S6E8FC3_SDC_00_DISPLAY_ON)
	ADDRESS(MSG_S6E8FC3_SDC, MSG_S6E8FC3_SDC_00_KEY1_ENABLE)
	ADDRESS(MSG_S6E8FC3_SDC, MSG_S6E8FC3_SDC_00_KEY2_ENABLE)
	ADDRESS(MSG_S6E8FC3_SDC, MSG_S6E8FC3_SDC_00_KEY3_ENABLE)
	ADDRESS(MSG_S6E8FC3_SDC, MSG_S6E8FC3_SDC_00_KEY1_DISABLE)
	ADDRESS(MSG_S6E8FC3_SDC, MSG_S6E8FC3_SDC_00_KEY2_DISABLE)
	ADDRESS(MSG_S6E8FC3_SDC, MSG_S6E8FC3_SDC_00_KEY3_DISABLE)
	{__ADDRESS(MSG_S6E8FC3_SDC_00_EXIT)},
	{__ADDRESS(MSG_S6E8FC3_SDC_00_INIT)},
	{__ADDRESS(MSG_S6E8FC3_SDC_00_KEY_ENABLE)},
	{__ADDRESS(MSG_S6E8FC3_SDC_00_KEY_DISABLE)},
	{__ADDRESS(MSG_S6E8FC3_SDC_00_ACL_EXIT)},
	{__ADDRESS(MSG_S6E8FC3_SDC_00_ACL_08P)},
	{__ADDRESS(MSG_S6E8FC3_SDC_00_WRCRLD_NORMAL)},
	{__ADDRESS(MSG_S6E8FC3_SDC_00_WRCRLD_HBM)},
	{__ADDRESS(MSG_S6E8FC3_SDC_00_FPS_60HZ)},
	{__ADDRESS(MSG_S6E8FC3_SDC_00_FPS_90HZ)},
	{__ADDRESS(MSG_S6E8FC3_SDC_00_PANEL_UPDATE)},
};

__XX_MAKE_CMDX(MSG_S6E8FC3_SDC_00_BRIGHTNESS)

enum {
	ENUM_APPEND(MSG_S6E8FC3_SDC_00_BRIGHTNESS, MSG_S6E8FC3_SDC_00_BRIGHTNESS)
};

static struct msg_segment S6E8FC3_SDC_00_BRIGHTNESS[] = {
	MSG_S6E8FC3_SDC_00_BRIGHTNESS(__XX_CMDX)
};

static struct msg_package PACKAGE_S6E8FC3_SDC_00_BRIGHTNESS[] = {
	MSG_S6E8FC3_SDC_00_BRIGHTNESS(__XX_ADDRESS)
};

#if defined(CONFIG_SMCDSD_DOZE)
enum {
	ALPM_OFF,
	ALPM_ON_LOW,	/* ALPM 2 NIT */
	HLPM_ON_LOW,	/* HLPM 2 NIT */
	ALPM_ON_HIGH,	/* ALPM 60 NIT */
	HLPM_ON_HIGH,	/* HLPM 60 NIT */
	ALPM_MODE_MAX
};

enum {
	AOD_MODE_OFF,
	AOD_MODE_ALPM,
	AOD_MODE_HLPM,
	AOD_MODE_MAX
};

#endif
static unsigned int acl_table[] = {
	[0] = GET_ENUM_WITH_NAME(MSG_S6E8FC3_SDC_00_ACL_EXIT),
	[1 ... 100] = GET_ENUM_WITH_NAME(MSG_S6E8FC3_SDC_00_ACL_08P),
};

static unsigned int wrcrl_table[] = {
	[0 ... UI_MAX_BRIGHTNESS] = GET_ENUM_WITH_NAME(MSG_S6E8FC3_SDC_00_WRCRLD_NORMAL),
	[UI_MAX_BRIGHTNESS + 1 ... EXTEND_BRIGHTNESS] = GET_ENUM_WITH_NAME(MSG_S6E8FC3_SDC_00_WRCRLD_HBM),
};

#endif /* __S6E8FC3_SDC_00_PARAM_H__ */
