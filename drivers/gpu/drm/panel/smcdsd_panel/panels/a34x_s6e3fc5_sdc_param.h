/* SPDX-License-Identifier: GPL-2.0 */
#ifndef __S6E3FC5_SDC_PARAM_H__
#define __S6E3FC5_SDC_PARAM_H__

#include <linux/types.h>
#include <drm/drm_mipi_dsi.h>

#include "../smcdsd_dsi_msg.h"
#include "a34x_s6e3fc5_sdc_param_brightness.h"

#define LCD_TYPE_VENDOR		"SDC"

#define EXTEND_BRIGHTNESS	510
#define UI_MAX_BRIGHTNESS	255
#define UI_DEFAULT_BRIGHTNESS	128

#define LDI_REG_BRIGHTNESS			0x51
#define LDI_REG_ID				0x04
#define LDI_REG_COORDINATE			0xA1
#define LDI_REG_DATE				LDI_REG_COORDINATE
#define LDI_REG_MANUFACTURE_INFO		LDI_REG_COORDINATE
#define LDI_REG_MANUFACTURE_INFO_CELL_ID	0x92
#define LDI_REG_CHIP_ID				0xD6

/* len is read length */
#define LDI_LEN_ID				3
#define LDI_LEN_COORDINATE			4	/* A1h 1st ... 4th */
#define LDI_LEN_DATE				7	/* A1h 5th ... 11th */
#define LDI_LEN_MANUFACTURE_INFO		4	/* A1h 12th ... 15th */
#define LDI_LEN_MANUFACTURE_INFO_CELL_ID	16	/* 92h 3rd ... 18th */
#define LDI_LEN_CHIP_ID				5
#define LDI_LEN_TRIM				9

/* offset is position including addr, not only para */
#define LDI_GPARA_COORDINATE			0	/* A1h 1st ... 4th */
#define LDI_GPARA_DATE				4	/* A1h 5th ... 11th */
#define LDI_GPARA_MANUFACTURE_INFO		11	/* A1h 12th ... 15th */
#define LDI_GPARA_MANUFACTURE_INFO_CELL_ID	2	/* 92h 3rd ... 18th */

#define NORMAL_TEMPERATURE	25	/* 25 degrees Celsius */

static unsigned char S6E3FC5_SDC_SLEEP_OUT[] = { 0x11 };
static unsigned char S6E3FC5_SDC_SLEEP_IN[] = { 0x10 };
static unsigned char S6E3FC5_SDC_DISPLAY_OFF[] = { 0x28 };
static unsigned char S6E3FC5_SDC_DISPLAY_ON[] = { 0x29 };

static unsigned char S6E3FC5_SDC_TEST_KEY_ON_9F[] = { 0x9F, 0xA5, 0xA5 };
static unsigned char S6E3FC5_SDC_TEST_KEY_ON_F0[] = { 0xF0, 0x5A, 0x5A };
static unsigned char S6E3FC5_SDC_TEST_KEY_ON_FC[] = { 0xFC, 0x5A, 0x5A };

static unsigned char S6E3FC5_SDC_TEST_KEY_OFF_9F[] = { 0x9F, 0x5A, 0x5A };
static unsigned char S6E3FC5_SDC_TEST_KEY_OFF_F0[] = { 0xF0, 0xA5, 0xA5 };
static unsigned char S6E3FC5_SDC_TEST_KEY_OFF_FC[] = { 0xFC, 0xA5, 0xA5 };

static unsigned char S6E3FC5_SDC_BRIGHTNESS_DFT[] = {
	0x51,
	0x00, 0x00
};

static unsigned char S6E3FC5_SDC_TE_ON[] = {
	0x35,
	0x00
};

static unsigned char S6E3FC5_SDC_PAGE_ADDRESS_1[] = {
	0x2A,
	0x00, 0x00, 0x04, 0x37
};

static unsigned char S6E3FC5_SDC_PAGE_ADDRESS_2[] = {
	0x2B,
	0x00, 0x00, 0x09, 0x23
};

static unsigned char S6E3FC5_SDC_FFC_806_1[] = {
	0xB0,
	0x00, 0x3A, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_806_2[] = {
	0xC5,
	0x8F, 0xF6
};

static unsigned char S6E3FC5_SDC_FFC_806_3[] = {
	0xB0,
	0x00, 0x36, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_806_4[] = {
	0xC5,
	0x11, 0x10, 0x50, 0x05
};

static unsigned char S6E3FC5_SDC_FFC_822_1[] = {
	0xB0,
	0x00, 0x3A, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_822_2[] = {
	0xC5,
	0x8D, 0x28
};

static unsigned char S6E3FC5_SDC_FFC_822_3[] = {
	0xB0,
	0x00, 0x36, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_822_4[] = {
	0xC5,
	0x11, 0x10, 0x50, 0x05
};

static unsigned char S6E3FC5_SDC_FFC_824_1[] = {
	0xB0,
	0x00, 0x3A, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_824_2[] = {
	0xC5,
	0x8C, 0xD1
};

static unsigned char S6E3FC5_SDC_FFC_824_3[] = {
	0xB0,
	0x00, 0x36, 0xC5
};

static unsigned char S6E3FC5_SDC_FFC_824_4[] = {
	0xC5,
	0x11, 0x10, 0x50, 0x05
};

static unsigned char S6E3FC5_SDC_PANEL_UPDATE[] = {
	0xF7,
	0x0F
};

static unsigned char S6E3FC5_SDC_ERR_FG_1[] = {
	0xE5,
	0x15	/* 0x15 : ERR_FG Enable */
};

static unsigned char S6E3FC5_SDC_ERR_FG_2[] = {
	0xED,
	0x44	/* 1st 0x44 : Default High */
};

static unsigned char S6E3FC5_SDC_PCD[] = {
	0xCC,
	0x02,
	0x5C,	/* 2nd 0x5C : default high */
	0x51	/* 3rd 0x51 : enable SW Reset */
};

static unsigned char S6E3FC5_SDC_ACL_1[] = {
	0xB0,
	0x00, 0x3F, 0x66
};

static unsigned char S6E3FC5_SDC_ACL_2_DIMMING_32FRAME[] = {
	0x66,
	0x50, 0x50,	/* 1st , 2nd Para. */
			/* 0x40, 0x40 : 16 Frame Average */
			/* 0x50, 0x50 : 32 Frame Average */
	0x15, 0x55, 0x55, 0x55, 0x08, 0xF1, 0xC6, 0x48,
	0x30, 0x00, 0x51, 0x66, 0x98, 0x00,
	0x20,		/* 17th Para. */
			/* 0x00 : ACL Dimming Off */
			/* 0x20 : ACL 32 Frame Dimming */
	0x10,
	0xB0		/* 19th Para. 0xB0 : ACL Start Step 50% */
};

static unsigned char S6E3FC5_SDC_ACL_2_DIMMING_OFF[] = {
	0x66,
	0x50, 0x50,	/* 1st , 2nd Para. */
			/* 0x40, 0x40 : 16 Frame Average */
			/* 0x50, 0x50 : 32 Frame Average */
	0x15, 0x55, 0x55, 0x55, 0x08, 0xF1, 0xC6, 0x48,
	0x30, 0x00, 0x51, 0x66, 0x98, 0x00,
	0x00,		/* 17th Para. */
			/* 0x00 : ACL Dimming Off */
			/* 0x20 : ACL 32 Frame Dimming */
	0x10,
	0xB0		/* 19th Para. 0xB0 : ACL Start Step 50% */
};

static unsigned char S6E3FC5_SDC_DSC_EN[] = {
//	0x07,
	0x01
};

static unsigned char S6E3FC5_SDC_DSC_PPS[] = {
//	0x9E,
	0x11, 0x00, 0x00, 0x89, 0x30, 0x80, 0x09, 0x24,
	0x04, 0x38, 0x00, 0x1E, 0x02, 0x1C, 0x02, 0x1C, 0x02,
	0x00, 0x02, 0x0E, 0x00, 0x20, 0x02, 0xE3, 0x00, 0x07,
	0x00, 0x0C, 0x03, 0x50, 0x03, 0x64, 0x18, 0x00, 0x10,
	0xF0, 0x03, 0x0C, 0x20, 0x00, 0x06, 0x0B, 0x0B, 0x33,
	0x0E, 0x1C, 0x2A, 0x38, 0x46, 0x54, 0x62, 0x69, 0x70,
	0x77, 0x79, 0x7B, 0x7D, 0x7E, 0x01, 0x02, 0x01, 0x00,
	0x09, 0x40, 0x09, 0xBE, 0x19, 0xFC, 0x19, 0xFA, 0x19,
	0xF8, 0x1A, 0x38, 0x1A, 0x78, 0x1A, 0xB6, 0x2A, 0xF6,
	0x2B, 0x34, 0x2B, 0x74, 0x3B, 0x74, 0x6B, 0xF4
};

static unsigned char S6E3FC5_SDC_ASWIRE_PULSE_OFF_1[] = {
	0xB0,
	0x00, 0x0A, 0xB5
};

static unsigned char S6E3FC5_SDC_ASWIRE_PULSE_OFF_2[] = {
	0xB5,
	0x00
};

static unsigned char S6E3FC5_SDC_120HZ[] = {
	0x60,
	0x00, 0x00	/* 0x00 : 120Hz */
};

static unsigned char S6E3FC5_SDC_60HZ[] = {
	0x60,
	0x08, 0x00	/* 0x08 : 60Hz */
};

static unsigned char S6E3FC5_SDC_SYNC_CONTROL_1[] = {
	0xB0,
	0x00, 0x0F, 0x66
};

static unsigned char S6E3FC5_SDC_SYNC_CONTROL_2_NORMAL[] = {
	0x66,
	0x10	/* 0x10 : Normal transition */
};

static unsigned char S6E3FC5_SDC_SYNC_CONTROL_2_SMOOTH[] = {
	0x66,
	0x30	/* 0x30 : Smooth transition */
};

static unsigned char S6E3FC5_SDC_DIMMING_SPEED_NORMAL[] = {
	0x53,
	0x20	/* 0x20 : Normal transition */
};

static unsigned char S6E3FC5_SDC_DIMMING_SPEED_SMOOTH[] = {
	0x53,
	0x28	/* 0x28 : Smooth transition */
};

static unsigned char S6E3FC5_SDC_DIMMING_SPEED_NORMAL_AND_HBM_ON[] = {
	0x53,
	0xE0	/* 0xE0 : Normal transition */
};

static unsigned char S6E3FC5_SDC_ACL_OFF[] = {
	0x55,
	0x00	/* 0x00 : ACL Off */
};

static unsigned char S6E3FC5_SDC_ACL_08P[] = {
	0x55,
	0x01	/* 0x01 : ACL 8% */
};

static unsigned char S6E3FC5_SDC_ACL_15P[] = {
	0x55,
	0x03	/* 0x03 : ACL 15% */
};

static unsigned char S6E3FC5_SDC_TSET_1[] = {
	0xB0,
	0x00, 0x01, 0xB5
};

static unsigned char S6E3FC5_SDC_TSET_DFT[] = {	/* 1 */
	0xB5,
	0x19
};

static unsigned char S6E3FC5_SDC_TSET_2_MINUS_00[] = {	/* 0 */
	0xB5,
	0x00,
};

static unsigned char S6E3FC5_SDC_TSET_2_MINUS_15[] = {	/* -15 */
	0xB5,
	BIT(7) | 15
};

static unsigned char S6E3FC5_SDC_TSET_2_MINUS_16[] = {	/* -16 */
	0xB5,
	BIT(7) | 16
};

static unsigned char S6E3FC5_SDC_AOD_AOR_1[] = {
	0xB0,
	0x00, 0x52, 0x66
};

static unsigned char S6E3FC5_SDC_AOD_AOR_2[] = {
	0x66,
	0x01, 0x16, 0xA8	/* AOR MAX */
};

static unsigned char S6E3FC5_SDC_AOD_AOR_3[] = {
	0x60,
	0x00, 0x00
};

static unsigned char S6E3FC5_SDC_AOD_INIT_1[] = {
	0xB0,
	0x00, 0x7A, 0xF4
};

static unsigned char S6E3FC5_SDC_AOD_INIT_2[] = {
	0xF4,
	0x28
};

static unsigned char S6E3FC5_SDC_AOD_INIT_3[] = {
	0x68,
	0x02
};

static unsigned char S6E3FC5_SDC_AOD_INIT_4[] = {
	0xB0,
	0x00, 0x52, 0x66
};

static unsigned char S6E3FC5_SDC_AOD_INIT_5[] = {
	0x66,
	0x00, 0x00, 0x18	/* AOR */
};

static unsigned char S6E3FC5_SDC_AOD_INIT_6_60NIT[] = {
	0x53,
	0x24	/* 0x24 : HLPM 60nit */
};

static unsigned char S6E3FC5_SDC_AOD_INIT_6_30NIT[] = {
	0x53,
	0x25	/* 0x25 : HLPM 30nit */
};

static unsigned char S6E3FC5_SDC_AOD_INIT_6_10NIT[] = {
	0x53,
	0x26	/* 0x26 : HLPM 10nit */
};

static unsigned char S6E3FC5_SDC_AOD_INIT_6_02NIT[] = {
	0x53,
	0x27	/* 0x27 : HLPM  2nit */
};

static unsigned char S6E3FC5_SDC_AOD_INIT_7[] = {
	0xB0,
	0x00, 0x1F, 0xF2
};

static unsigned char S6E3FC5_SDC_AOD_INIT_8[] = {
	0xF2,
	0x02, 0x56
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_1[] = {
	0xB0,
	0x00, 0x08, 0xB5
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_2[] = {
	0xB5,
	0x00, 0x00, 0x00
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_3[] = {
	0xB0,
	0x00, 0x1F, 0xF2
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_4[] = {
	0xF2,
	0x02, 0x7E
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_5[] = {
	0x68,
	0x02, 0x01
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_6[] = {
	0xB0,
	0x00, 0x0F, 0x66
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_7[] = {
	0x66,
	0x10	/* 0x10 : Normal transition */
};

static unsigned char S6E3FC5_SDC_AOD_EXIT_8[] = {
	0x53,
	0x20
};

static struct msg_segment MSG_S6E3FC5_SDC_EXIT[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_9F)},
	{__MSG_TX(S6E3FC5_SDC_DISPLAY_OFF), __MSLEEP(20)},
	{__MSG_TX(S6E3FC5_SDC_SLEEP_IN), __MSLEEP(120)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F)},
};

static struct msg_segment MSG_S6E3FC5_SDC_DISPLAY_ON[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_9F)},
	{__MSG_TX(S6E3FC5_SDC_DISPLAY_ON)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F)},
};

static struct msg_segment MSG_S6E3FC5_SDC_KEY_ON[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_9F)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},
};

static struct msg_segment MSG_S6E3FC5_SDC_KEY_OFF[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F)},
};

static struct msg_segment MSG_S6E3FC5_SDC_INIT[] = {
//Sleep Out(11h)
	{__MSG_TX(S6E3FC5_SDC_SLEEP_OUT), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), __MSLEEP(90)},	/* Delay 90ms */

	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_9F), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1 Common Setting
//4.1.1 TE(Vsync) ON/OFF
	{__MSG_TX(S6E3FC5_SDC_TE_ON), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.2 PAGE ADDRESS SET
	{__MSG_TX(S6E3FC5_SDC_PAGE_ADDRESS_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_PAGE_ADDRESS_2), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.3 FFC SET
	{__MSG_TX(S6E3FC5_SDC_FFC_806_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_FFC_806_2), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_FFC_806_3), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_FFC_806_4), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.4 ERR_FG Setting
	{__MSG_TX(S6E3FC5_SDC_ERR_FG_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_ERR_FG_2), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.5 PCD Setting
	{__MSG_TX(S6E3FC5_SDC_PCD), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.6 ACL Setting
	{__MSG_TX(S6E3FC5_SDC_ACL_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_ACL_2_DIMMING_32FRAME), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.1.7 DSC Setting
	{__MSG_TX(S6E3FC5_SDC_DSC_EN), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), .dsi_msg.type = MIPI_DSI_DCS_COMPRESSION_MODE},
	{__MSG_TX(S6E3FC5_SDC_DSC_PPS), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), .dsi_msg.type = MIPI_DSI_PICTURE_PARAMETER_SET},

//4.1.8 ASWIRE Pulse Off Setting
	{__MSG_TX(S6E3FC5_SDC_ASWIRE_PULSE_OFF_1), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_ASWIRE_PULSE_OFF_2), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), __MSLEEP(30)},	/* 10. Wait 30ms */

#if 0
//4.2 Brightness Setting
//4.2.1 Max & Dimming
	{__MSG_TX(S6E3FC5_SDC_60HZ),.modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_SYNC_CONTROL_1),.modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_SYNC_CONTROL_2_SMOOTH),.modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_DIMMING_SPEED_SMOOTH),.modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_BRIGHTNESS_DFT),.modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE),.modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.2.3 ACL ON/OFF
	{__MSG_TX(S6E3FC5_SDC_ACL_OFF),.modes = BIT(MSG_MODE_SINGLE_TRANSFER)},

//4.3 ELVSS Temp Compensation
	{__MSG_TX(S6E3FC5_SDC_TSET_1),.modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_TSET_DFT), .modes = BIT(MSG_MODE_SINGLE_TRANSFER), __MSLEEP(30)},	/* 10. Wait 30ms */
#endif

	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC), .modes = BIT(MSG_MODE_SINGLE_TRANSFER)},
};

static struct msg_segment MSG_S6E3FC5_SDC_FFC_806[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},

	{__MSG_TX(S6E3FC5_SDC_FFC_806_1)},
	{__MSG_TX(S6E3FC5_SDC_FFC_806_2)},
	{__MSG_TX(S6E3FC5_SDC_FFC_806_3)},
	{__MSG_TX(S6E3FC5_SDC_FFC_806_4)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
};

static struct msg_segment MSG_S6E3FC5_SDC_FFC_822[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},

	{__MSG_TX(S6E3FC5_SDC_FFC_822_1)},
	{__MSG_TX(S6E3FC5_SDC_FFC_822_2)},
	{__MSG_TX(S6E3FC5_SDC_FFC_822_3)},
	{__MSG_TX(S6E3FC5_SDC_FFC_822_4)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
};

static struct msg_segment MSG_S6E3FC5_SDC_FFC_824[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},

	{__MSG_TX(S6E3FC5_SDC_FFC_824_1)},
	{__MSG_TX(S6E3FC5_SDC_FFC_824_2)},
	{__MSG_TX(S6E3FC5_SDC_FFC_824_3)},
	{__MSG_TX(S6E3FC5_SDC_FFC_824_4)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
};

static struct msg_segment MSG_S6E3FC5_SDC_TSET_NORMAL[] = {
	{__MSG_TX(S6E3FC5_SDC_TSET_1)},
	{__MSG_TX(S6E3FC5_SDC_TSET_DFT)},
};

static struct msg_segment MSG_S6E3FC5_SDC_TSET_MINUS_00[] = {
	{__MSG_TX(S6E3FC5_SDC_TSET_1)},
	{__MSG_TX(S6E3FC5_SDC_TSET_2_MINUS_00)},
};

static struct msg_segment MSG_S6E3FC5_SDC_TSET_MINUS_15[] = {
	{__MSG_TX(S6E3FC5_SDC_TSET_1)},
	{__MSG_TX(S6E3FC5_SDC_TSET_2_MINUS_15)},
};

static struct msg_segment MSG_S6E3FC5_SDC_TSET_MINUS_16[] = {
	{__MSG_TX(S6E3FC5_SDC_TSET_1)},
	{__MSG_TX(S6E3FC5_SDC_TSET_2_MINUS_16)},
};

static struct msg_segment MSG_S6E3FC5_SDC_UPTO500NIT_NORMAL[] = {
	//{__MSG_TX(S6E3FC5_SDC_ACL_1)},
	//{__MSG_TX(S6E3FC5_SDC_ACL_2_DIMMING_OFF)},

	{__MSG_TX(S6E3FC5_SDC_SYNC_CONTROL_1)},
	{__MSG_TX(S6E3FC5_SDC_SYNC_CONTROL_2_NORMAL)},
	{__MSG_TX(S6E3FC5_SDC_DIMMING_SPEED_NORMAL)},
};

static struct msg_segment MSG_S6E3FC5_SDC_UPTO500NIT_SMOOTH[] = {
	//{__MSG_TX(S6E3FC5_SDC_ACL_1)},
	//{__MSG_TX(S6E3FC5_SDC_ACL_2_DIMMING_32FRAME)},

	{__MSG_TX(S6E3FC5_SDC_SYNC_CONTROL_1)},
	{__MSG_TX(S6E3FC5_SDC_SYNC_CONTROL_2_SMOOTH)},
	{__MSG_TX(S6E3FC5_SDC_DIMMING_SPEED_SMOOTH)},
};

static struct msg_segment MSG_S6E3FC5_SDC_500NITOVER_NORMAL[] = {
	//{__MSG_TX(S6E3FC5_SDC_ACL_1)},
	//{__MSG_TX(S6E3FC5_SDC_ACL_2_DIMMING_OFF)},

	{__MSG_TX(S6E3FC5_SDC_SYNC_CONTROL_1)},
	{__MSG_TX(S6E3FC5_SDC_SYNC_CONTROL_2_NORMAL)},
	{__MSG_TX(S6E3FC5_SDC_DIMMING_SPEED_NORMAL_AND_HBM_ON)},
};

static struct msg_segment MSG_S6E3FC5_SDC_AOD_INIT_60NIT[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},

	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_1)},
	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_2)},
	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_3)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_1)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_2)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_3)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_4)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_5)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_6_60NIT)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_7)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_8)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), __USLEEP(1)},

	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
};

static struct msg_segment MSG_S6E3FC5_SDC_AOD_INIT_30NIT[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},

	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_1)},
	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_2)},
	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_3)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_1)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_2)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_3)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_4)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_5)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_6_30NIT)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_7)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_8)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), __USLEEP(1)},

	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
};

static struct msg_segment MSG_S6E3FC5_SDC_AOD_INIT_10NIT[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},

	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_1)},
	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_2)},
	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_3)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_1)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_2)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_3)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_4)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_5)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_6_10NIT)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_7)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_8)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), __USLEEP(1)},

	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
};

static struct msg_segment MSG_S6E3FC5_SDC_AOD_INIT_02NIT[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},

	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_1)},
	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_2)},
	{__MSG_TX(S6E3FC5_SDC_AOD_AOR_3)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},

	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_1)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_2)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_3)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_4)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_5)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_6_02NIT)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_7)},
	{__MSG_TX(S6E3FC5_SDC_AOD_INIT_8)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), __USLEEP(1)},

	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
};

static struct msg_segment MSG_S6E3FC5_SDC_AOD_EXIT[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},

	{__MSG_TX(S6E3FC5_SDC_AOD_EXIT_1)},
	{__MSG_TX(S6E3FC5_SDC_AOD_EXIT_2)},
	{__MSG_TX(S6E3FC5_SDC_AOD_EXIT_3)},
	{__MSG_TX(S6E3FC5_SDC_AOD_EXIT_4)},
	{__MSG_TX(S6E3FC5_SDC_AOD_EXIT_5)},
	{__MSG_TX(S6E3FC5_SDC_AOD_EXIT_6)},
	{__MSG_TX(S6E3FC5_SDC_AOD_EXIT_7)},
	{__MSG_TX(S6E3FC5_SDC_AOD_EXIT_8)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), __MSLEEP(34)},	/* Delay 33.3ms */

#if 0
	{__MSG_TX(S6E3FC5_SDC_60HZ)},
	{__MSG_TX(S6E3FC5_SDC_BRIGHTNESS_DFT)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE), .modes = BIT(MSG_MODE_BLOCKING), __USLEEP(1)},
#endif

	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
};

static struct msg_segment MSG_S6E3FC5_SDC_SINGLE_COMMAND[] = {
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_9F)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_F0)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_ON_FC)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_9F)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_F0)},
	{__MSG_TX(S6E3FC5_SDC_TEST_KEY_OFF_FC)},
	{__MSG_TX(S6E3FC5_SDC_PANEL_UPDATE)},
	{__MSG_TX(S6E3FC5_SDC_120HZ)},
	{__MSG_TX(S6E3FC5_SDC_60HZ)},
	{__MSG_TX(S6E3FC5_SDC_ACL_OFF)},
	{__MSG_TX(S6E3FC5_SDC_ACL_08P)},
	{__MSG_TX(S6E3FC5_SDC_ACL_15P)},
};

enum {
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_ON_9F)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_ON_F0)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_ON_FC)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_OFF_9F)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_OFF_F0)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TEST_KEY_OFF_FC)
	ENUM_APPEND(MSG_S6E3FC5_SDC_PANEL_UPDATE)
	ENUM_APPEND(MSG_S6E3FC5_SDC_120HZ)
	ENUM_APPEND(MSG_S6E3FC5_SDC_60HZ)
	ENUM_APPEND(MSG_S6E3FC5_SDC_ACL_OFF)
	ENUM_APPEND(MSG_S6E3FC5_SDC_ACL_08P)
	ENUM_APPEND(MSG_S6E3FC5_SDC_ACL_15P)
	ENUM_APPEND(MSG_S6E3FC5_SDC_DISPLAY_ON)
	ENUM_APPEND(MSG_S6E3FC5_SDC_EXIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_INIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_KEY_ON)
	ENUM_APPEND(MSG_S6E3FC5_SDC_KEY_OFF)
	ENUM_APPEND(MSG_S6E3FC5_SDC_UPTO500NIT_NORMAL)
	ENUM_APPEND(MSG_S6E3FC5_SDC_UPTO500NIT_SMOOTH)
	ENUM_APPEND(MSG_S6E3FC5_SDC_500NITOVER_NORMAL)
	ENUM_APPEND(MSG_S6E3FC5_SDC_AOD_INIT_60NIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_AOD_INIT_30NIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_AOD_INIT_10NIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_AOD_INIT_02NIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_AOD_EXIT)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TSET_NORMAL)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TSET_MINUS_00)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TSET_MINUS_15)
	ENUM_APPEND(MSG_S6E3FC5_SDC_TSET_MINUS_16)
	ENUM_APPEND(MSG_S6E3FC5_SDC_FFC_806)
	ENUM_APPEND(MSG_S6E3FC5_SDC_FFC_822)
	ENUM_APPEND(MSG_S6E3FC5_SDC_FFC_824)
};

static struct msg_package PACKAGE_S6E3FC5_SDC[ ] = {
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_TEST_KEY_ON_9F)
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_TEST_KEY_ON_F0)
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_TEST_KEY_ON_FC)
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_TEST_KEY_OFF_9F)
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_TEST_KEY_OFF_F0)
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_TEST_KEY_OFF_FC)
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_PANEL_UPDATE)
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_120HZ)
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_60HZ)
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_ACL_OFF)
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_ACL_08P)
	ADDRESS(MSG_S6E3FC5_SDC_SINGLE_COMMAND, MSG_S6E3FC5_SDC_ACL_15P)
	{__ADDRESS(MSG_S6E3FC5_SDC_DISPLAY_ON)},
	{__ADDRESS(MSG_S6E3FC5_SDC_EXIT)},
	{__ADDRESS(MSG_S6E3FC5_SDC_INIT)},
	{__ADDRESS(MSG_S6E3FC5_SDC_KEY_ON)},
	{__ADDRESS(MSG_S6E3FC5_SDC_KEY_OFF)},
	{__ADDRESS(MSG_S6E3FC5_SDC_UPTO500NIT_NORMAL)},
	{__ADDRESS(MSG_S6E3FC5_SDC_UPTO500NIT_SMOOTH)},
	{__ADDRESS(MSG_S6E3FC5_SDC_500NITOVER_NORMAL)},
	{__ADDRESS(MSG_S6E3FC5_SDC_AOD_INIT_60NIT)},
	{__ADDRESS(MSG_S6E3FC5_SDC_AOD_INIT_30NIT)},
	{__ADDRESS(MSG_S6E3FC5_SDC_AOD_INIT_10NIT)},
	{__ADDRESS(MSG_S6E3FC5_SDC_AOD_INIT_02NIT)},
	{__ADDRESS(MSG_S6E3FC5_SDC_AOD_EXIT)},
	{__ADDRESS(MSG_S6E3FC5_SDC_TSET_NORMAL)},
	{__ADDRESS(MSG_S6E3FC5_SDC_TSET_MINUS_00)},
	{__ADDRESS(MSG_S6E3FC5_SDC_TSET_MINUS_15)},
	{__ADDRESS(MSG_S6E3FC5_SDC_TSET_MINUS_16)},
	{__ADDRESS(MSG_S6E3FC5_SDC_FFC_806)},
	{__ADDRESS(MSG_S6E3FC5_SDC_FFC_822)},
	{__ADDRESS(MSG_S6E3FC5_SDC_FFC_824)},
};

__XX_MAKE_CMDX(MSG_S6E3FC5_SDC_BRIGHTNESS)

enum {
	ENUM_APPEND(MSG_S6E3FC5_SDC_BRIGHTNESS, MSG_S6E3FC5_SDC_BRIGHTNESS)
};

static struct msg_segment S6E3FC5_SDC_BRIGHTNESS[] = {
	MSG_S6E3FC5_SDC_BRIGHTNESS(__XX_CMDX)
};

static struct msg_package PACKAGE_S6E3FC5_SDC_BRIGHTNESS[] = {
	MSG_S6E3FC5_SDC_BRIGHTNESS(__XX_ADDRESS)
};

#if defined(CONFIG_SMCDSD_DOZE)
enum {
	ALPM_OFF,
	ALPM_ON_LOW,	/* ALPM 2 NIT */
	HLPM_ON_LOW,	/* HLPM 2 NIT */
	ALPM_ON_HIGH,	/* ALPM 60 NIT */
	HLPM_ON_HIGH,	/* HLPM 60 NIT */
	ALPM_MODE_MAX
};

enum {
	AOD_MODE_OFF,
	AOD_MODE_ALPM,
	AOD_MODE_HLPM,
	AOD_MODE_MAX
};

static const char *AOD_HLPM_STATE_NAME[] = {
	[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_02NIT)] = "AOD_INIT_02NIT",
	[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_10NIT)] = "AOD_INIT_10NIT",
	[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_30NIT)] = "AOD_INIT_30NIT",
	[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_60NIT)] = "AOD_INIT_60NIT",
	[GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_EXIT)] = "AOD_EXIT",
};

static unsigned int lpm_old_table[ALPM_MODE_MAX] = {
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_EXIT),	/* FAC 4, 2, 0 = 60NIT, 2NIT, EXIT */
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_02NIT),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_02NIT),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_60NIT),
	GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_60NIT),
};

static unsigned int lpm_init_table[EXTEND_BRIGHTNESS + 1] = {
	[0 ... 11]			= GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_02NIT),
	[12 ... 31]			= GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_10NIT),
	[32 ... 54]			= GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_30NIT),
	[55 ... EXTEND_BRIGHTNESS]	= GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_INIT_60NIT),
};

static unsigned int lpm_exit_table[EXTEND_BRIGHTNESS + 1] = {
	[0 ... EXTEND_BRIGHTNESS]	= GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_AOD_EXIT),
};
#endif

static unsigned int acl_table[2][3] = {	/* [mask][acl] */
	{
		[0] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_OFF),
		[1] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_08P),
		[2] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_15P),
	}, {
		[0] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_OFF),
		[1] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_OFF),
		[2] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_ACL_OFF),
	},
};

static unsigned int dim_table[2][EXTEND_BRIGHTNESS + 1] = {	/* [mask][brightness] */
	{
		[0 ... UI_MAX_BRIGHTNESS] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_UPTO500NIT_SMOOTH),
		[UI_MAX_BRIGHTNESS + 1 ... EXTEND_BRIGHTNESS] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_500NITOVER_NORMAL),
	}, {
		[0 ... UI_MAX_BRIGHTNESS] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_UPTO500NIT_NORMAL),
		[UI_MAX_BRIGHTNESS + 1 ... EXTEND_BRIGHTNESS] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_500NITOVER_NORMAL),
	},
};

#define TEMPERATURE_UP(_degree)	(_degree + NORMAL_TEMPERATURE)

static unsigned int tset_table[] = {
	[TEMPERATURE_UP(1) ... TEMPERATURE_UP(25)] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TSET_NORMAL),
	[TEMPERATURE_UP(0)] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TSET_MINUS_00),
	[TEMPERATURE_UP(-15) ... TEMPERATURE_UP(-1)] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TSET_MINUS_15),
	[TEMPERATURE_UP(-16)] = GET_ENUM_WITH_NAME(MSG_S6E3FC5_SDC_TSET_MINUS_16),
};

#endif /* __S6E3FC5_SDC_PARAM_H__ */
